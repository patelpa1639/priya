import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import sgMail from '@sendgrid/mail';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Initialize SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY!);

// Vapi webhook payload interface
interface VapiWebhookPayload {
  id: string;
  status: string;
  caller?: {
    number: string;
    name?: string;
  };
  transcript?: string;
  summary?: string;
  metadata?: Record<string, any>;
  duration?: number;
  cost?: number;
  created_at: string;
  ended_at?: string;
}

// Email template for call summary
function createEmailContent(callData: VapiWebhookPayload, summary: string) {
  const callDate = new Date(callData.created_at).toLocaleString();
  const duration = callData.duration ? `${Math.round(callData.duration / 60)} minutes` : 'Unknown';
  const cost = callData.cost ? `$${callData.cost.toFixed(4)}` : 'Unknown';

  return {
    subject: `Call Summary - ${callData.caller?.name || callData.caller?.number || 'Unknown Caller'}`,
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
          üìû Call Summary Report
        </h2>
        
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #007bff; margin-top: 0;">Call Details</h3>
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Call ID:</td>
              <td style="padding: 8px 0;">${callData.id}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Caller:</td>
              <td style="padding: 8px 0;">${callData.caller?.name || 'Unknown'} (${callData.caller?.number || 'No number'})</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Date & Time:</td>
              <td style="padding: 8px 0;">${callDate}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Duration:</td>
              <td style="padding: 8px 0;">${duration}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Cost:</td>
              <td style="padding: 8px 0;">${cost}</td>
            </tr>
            <tr>
              <td style="padding: 8px 0; font-weight: bold; color: #555;">Status:</td>
              <td style="padding: 8px 0;">
                <span style="background-color: ${callData.status === 'completed' ? '#28a745' : '#ffc107'}; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;">
                  ${callData.status}
                </span>
              </td>
            </tr>
          </table>
        </div>

        <div style="background-color: #e7f3ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #007bff; margin-top: 0;">ü§ñ AI Summary</h3>
          <p style="line-height: 1.6; color: #333; margin: 0;">
            ${summary.replace(/\n/g, '<br>')}
          </p>
        </div>

        ${callData.transcript ? `
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #007bff; margin-top: 0;">üìù Full Transcript</h3>
          <div style="background-color: white; padding: 15px; border-radius: 4px; border-left: 4px solid #007bff; max-height: 300px; overflow-y: auto;">
            <pre style="margin: 0; white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 12px; color: #333;">${callData.transcript}</pre>
          </div>
        </div>
        ` : ''}

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px;">
          <p>This email was automatically generated by your Vapi webhook integration.</p>
          <p>Call ID: ${callData.id} | Generated at: ${new Date().toLocaleString()}</p>
        </div>
      </div>
    `,
    text: `
Call Summary Report

Call Details:
- Call ID: ${callData.id}
- Caller: ${callData.caller?.name || 'Unknown'} (${callData.caller?.number || 'No number'})
- Date & Time: ${callDate}
- Duration: ${duration}
- Cost: ${cost}
- Status: ${callData.status}

AI Summary:
${summary}

${callData.transcript ? `
Full Transcript:
${callData.transcript}
` : ''}

---
This email was automatically generated by your Vapi webhook integration.
Call ID: ${callData.id} | Generated at: ${new Date().toLocaleString()}
    `,
  };
}

// Function to summarize transcript using OpenAI
async function summarizeTranscript(transcript: string, callerInfo: string): Promise<string> {
  try {
    const prompt = `Please provide a concise summary of the following phone call transcript. Focus on the key points, action items, and important information discussed.

Caller Information: ${callerInfo}

Transcript:
${transcript}

Please structure your summary with:
1. Main topic/purpose of the call
2. Key points discussed
3. Action items or next steps (if any)
4. Important details or decisions made

Keep the summary clear and professional.`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: 'You are a helpful assistant that summarizes phone call transcripts in a clear, professional manner.',
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 500,
      temperature: 0.3,
    });

    return completion.choices[0]?.message?.content || 'Unable to generate summary';
  } catch (error) {
    console.error('Error summarizing transcript:', error);
    throw new Error('Failed to summarize transcript');
  }
}

// Function to send email via SendGrid
async function sendEmail(emailContent: { subject: string; html: string; text: string }) {
  try {
    const msg = {
      to: process.env.SENDGRID_TO_EMAIL!,
      from: process.env.SENDGRID_FROM_EMAIL!,
      subject: emailContent.subject,
      html: emailContent.html,
      text: emailContent.text,
    };

    await sgMail.send(msg);
    console.log('Email sent successfully');
  } catch (error) {
    console.error('Error sending email:', error);
    throw new Error('Failed to send email');
  }
}

// Main webhook handler
export async function POST(request: NextRequest) {
  try {
    // Verify the request is from Vapi (optional security check)
    const userAgent = request.headers.get('user-agent');
    if (userAgent && !userAgent.includes('Vapi')) {
      console.warn('Potential unauthorized webhook call:', userAgent);
    }

    // Parse the webhook payload
    const body = await request.json();
    const callData: VapiWebhookPayload = body;

    console.log('Received Vapi webhook:', {
      id: callData.id,
      status: callData.status,
      caller: callData.caller,
      hasTranscript: !!callData.transcript,
    });

    // Only process completed calls with transcripts
    if (callData.status !== 'completed' || !callData.transcript) {
      return NextResponse.json({
        success: true,
        message: 'Call not completed or no transcript available',
        callId: callData.id,
      });
    }

    // Create caller info string
    const callerInfo = callData.caller?.name 
      ? `${callData.caller.name} (${callData.caller.number})`
      : callData.caller?.number || 'Unknown caller';

    // Generate AI summary
    console.log('Generating AI summary for call:', callData.id);
    const summary = await summarizeTranscript(callData.transcript, callerInfo);

    // Create email content
    const emailContent = createEmailContent(callData, summary);

    // Send email
    console.log('Sending email notification for call:', callData.id);
    await sendEmail(emailContent);

    // Return success response
    return NextResponse.json({
      success: true,
      message: 'Webhook processed successfully',
      callId: callData.id,
      summaryGenerated: true,
      emailSent: true,
    });

  } catch (error) {
    console.error('Error processing webhook:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred',
      },
      { status: 500 }
    );
  }
}

// Handle GET requests (for webhook verification)
export async function GET(request: NextRequest) {
  return NextResponse.json({
    message: 'Vapi webhook endpoint is active',
    timestamp: new Date().toISOString(),
  });
} 