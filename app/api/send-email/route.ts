import { NextRequest, NextResponse } from 'next/server';
import { sendEmail, testEmailConnection } from '@/lib/email-service';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { summary } = body;

    // Validate that summary is provided
    if (!summary) {
      return NextResponse.json(
        { success: false, error: 'Summary is required' },
        { status: 400 }
      );
    }

    // Create email content for Priya
    const emailContent = {
      subject: `ðŸ“ž Call Summary from ${process.env.ASSISTANT_NAME || 'Priya'}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8f9fa;">
          <div style="background-color: white; border-radius: 12px; padding: 30px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #6366f1; margin: 0; font-size: 28px;">ðŸ¤– ${process.env.ASSISTANT_NAME || 'Priya'}</h1>
              <p style="color: #6b7280; margin: 5px 0 0 0; font-size: 16px;">Your Personal AI Assistant</p>
            </div>
            
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
              <h2 style="margin: 0 0 10px 0; font-size: 20px;">ðŸ“ž Call Summary</h2>
              <p style="margin: 0; opacity: 0.9;">Here's what happened during the call</p>
            </div>
            
            <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 25px;">
              <h3 style="margin-top: 0; font-size: 18px;">ðŸ¤– Summary</h3>
              <div style="background-color: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 6px;">
                <p style="line-height: 1.6; margin: 0; font-size: 14px;">
                  ${summary.replace(/\n/g, '<br>')}
                </p>
              </div>
            </div>

            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px solid #e5e7eb;">
              <p style="color: #6b7280; font-size: 12px; margin: 0;">
                This summary was automatically generated by ${process.env.ASSISTANT_NAME || 'Priya'}, your personal AI assistant.
              </p>
              <p style="color: #6b7280; font-size: 12px; margin: 5px 0 0 0;">
                Generated at: ${new Date().toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      `,
      text: `
ðŸ¤– ${process.env.ASSISTANT_NAME || 'Priya'} - Your Personal AI Assistant
ðŸ“ž Call Summary

Summary:
${summary}

---
This summary was automatically generated by ${process.env.ASSISTANT_NAME || 'Priya'}, your personal AI assistant.
Generated at: ${new Date().toLocaleString()}
      `,
    };

    // Send the email using Gmail SMTP
    const result = await sendEmail(emailContent);

    return NextResponse.json({
      success: true,
      message: 'Email sent successfully by Priya',
      messageId: result.messageId,
      timestamp: new Date().toISOString(),
      assistant: process.env.ASSISTANT_NAME || 'Priya',
    });

  } catch (error) {
    console.error('Error sending email:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to send email',
      },
      { status: 500 }
    );
  }
}

// Handle GET requests for testing
export async function GET(request: NextRequest) {
  try {
    const connectionTest = await testEmailConnection();
    
    return NextResponse.json({
      message: `${process.env.ASSISTANT_NAME || 'Priya'} email endpoint is active`,
      assistant: process.env.ASSISTANT_NAME || 'Priya',
      emailTest: connectionTest,
      timestamp: new Date().toISOString(),
      instructions: 'Send a POST request with a JSON body containing a "summary" field',
    });
  } catch (error) {
    return NextResponse.json({
      message: `${process.env.ASSISTANT_NAME || 'Priya'} email endpoint is active`,
      assistant: process.env.ASSISTANT_NAME || 'Priya',
      error: 'Email connection test failed',
      timestamp: new Date().toISOString(),
    });
  }
} 