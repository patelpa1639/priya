import { NextRequest, NextResponse } from 'next/server';
import sgMail from '@sendgrid/mail';

// Initialize SendGrid with API key from environment variables
sgMail.setApiKey(process.env.SENDGRID_API_KEY!);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { summary } = body;

    // Validate that summary is provided
    if (!summary) {
      return NextResponse.json(
        { success: false, error: 'Summary is required' },
        { status: 400 }
      );
    }

    // Create email message
    const msg = {
      to: process.env.SENDGRID_TO_EMAIL!,
      from: process.env.SENDGRID_FROM_EMAIL!,
      subject: 'Missed Call Summary',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
            ðŸ“ž Missed Call Summary
          </h2>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #007bff; margin-top: 0;">Summary</h3>
            <p style="line-height: 1.6; color: #333; margin: 0;">
              ${summary.replace(/\n/g, '<br>')}
            </p>
          </div>

          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px;">
            <p>This email was automatically generated by your application.</p>
            <p>Generated at: ${new Date().toLocaleString()}</p>
          </div>
        </div>
      `,
      text: `
Missed Call Summary

Summary:
${summary}

---
This email was automatically generated by your application.
Generated at: ${new Date().toLocaleString()}
      `,
    };

    // Send the email
    await sgMail.send(msg);

    return NextResponse.json({
      success: true,
      message: 'Email sent successfully',
      timestamp: new Date().toISOString(),
    });

  } catch (error) {
    console.error('Error sending email:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to send email',
      },
      { status: 500 }
    );
  }
}

// Handle GET requests for testing
export async function GET(request: NextRequest) {
  return NextResponse.json({
    message: 'Email sending endpoint is active',
    timestamp: new Date().toISOString(),
    instructions: 'Send a POST request with a JSON body containing a "summary" field',
  });
} 